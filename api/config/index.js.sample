'use strict';

const fs = require('fs');
const winston = require('winston');
const request = require('request');

var sca_host = "https://soichi7.ppa.iu.edu";

//warning.. you don't get error message if your user/pass etc. are incorrect (it just keeps retrying silently..)
exports.event = {
    amqp: {
        url: "amqp://event:eventpass123@soichi7.ppa:5672/sca"
    },
    
    //list of exchanges that this service supports (and jwt token to trust)
    exchanges: {
        //wf: fs.readFileSync('/home/hayashis/git/sca-wf/config/wf.pub'),
        //other: fs.readFileSync('/home/hayashis/git/sca-wf/config/wf.pub'),

        wf: function(req, key, cb) {
            //console.log("checking access for "+ex+":"+key);
            request.get({
                url: sca_host+"/api/wf/event/checkaccess/"+key,
                json: true,
                headers: {'Authorization': 'Bearer '+req.query.jwt}
            }, function(err, res, body) {
                //console.dir(body);
                cb(err, (body.status == "ok"));
            });
        }
    }
}

//you need to allow websocket upgrade on your webserver if you are proxying
//(nginx)
//proxy_set_header Upgrade $http_upgrade;
//proxy_set_header Connection "upgrade";
//proxy_set_header Host $host;

exports.express = {
    port: 12348,
    //host: "soichi7.ppa",

    //public key used to validate user requests
    //jwt: fs.readFileSync('/home/hayashis/git/auth/api/config/auth.pub'),
}

exports.logger = {
    winston: {
        //hide header that might contain jwt
        requestWhitelist: ['url', /*'headers',*/ 'method', 'httpVersion', 'originalUrl', 'query'],
        transports: [
            //display all logs to console
            new winston.transports.Console({
                timestamp: function() {
                    var d = new Date();
                    return d.toString(); //show timestamp
                },
                colorize: true,
                level: 'debug'
            }),

            /*
            //store all warnings / errors in error.log
            new (winston.transports.File)({ 
                filename: '/var/log/sca/error.log',
                level: 'warn'
            })
            */
        ]
    },
}


